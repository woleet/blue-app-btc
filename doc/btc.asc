Bitcoin application : Common Technical Specifications
=====================================================
Ledger Firmware Team <hello@ledger.fr>
Application version 1.1.9

== 1.1.9

  - Split specification from common firmware
  - Add display and segwit options to GET WALLET PUBLIC KEY

== About

This specification describes the APDU messages interface to communicate with the Bitcoin
application. It is based on the HW.1 firmware specification detailed on https://github.com/LedgerHQ/btchip-doc

== Wallet usage APDUs

=== GET WALLET PUBLIC KEY

==== Description

This command returns the public key and Base58 encoded address for the given BIP 32 path.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*
|   E0  |   40   |  00 : do not display the address

                    01 : display the address

                 |   00 : return a legacy address

                           01 : return a P2SH-P2WPKH address

                           02 : return a Bech32 encoded P2WPKH address | variable | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
| Bitcoin address length                                                            | 1
| Bitcoin address                                                                   | var
| BIP32 Chain code                                                                  | 32
|==============================================================================================================================


=== SIGN MESSAGE

==== Description

This command is used to sign message using a private key.

The signature is performed as follows :

  - The data to sign is the magic "\x18Bitcoin Signed Message:\n" - followed by the length of the message to sign on 1 byte (if requested) followed by the binary content of the message
  - The signature is performed on a double SHA-256 hash of the data to sign using the selected private key

The signature is returned using the standard ASN-1 encoding. To convert it to the proprietary Bitcoin-QT format, the host has to :

   - Get the parity of the first byte (sequence) : P
   - Add 27 to P if the public key is not compressed, otherwise add 31 to P
   - Return the Base64 encoded version of P || r || s

If the low end word of one component of the BIP 32 derivation path includes 0xB11D or 0xB11E the message is immediately signed without confirmation (typically used for BitID).

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*
|   E0  |   4E   |  00 : prepare message

                    80 : sign message|

                    01 : when preparing, first part of the message

                    80 : when preparing, next part of the message

                    |   var    | var
|==============================================================================================================================


'Input data in prepare mode (first block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index of the private key to use (big endian)                     | 4
| ...                                                                               | 4
| Last derivation index of the private key to use (big endian)                      | 4
| Message length (big endian, coded on 1 byte for legacy calls)                     | 2
| Message data                                                                      | var
|==============================================================================================================================

'Input data in prepare mode (next blocks)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Message data                                                                        | var
|==============================================================================================================================


'Input data in sign mode'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                      | *Length*
| User validation code length (or 00 in server mode)                                 | 1
| User validation code                                                               | var
|==============================================================================================================================


'Output data in prepare mode (not last block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| RFU (00)                                                                        | 1
|==============================================================================================================================


'Output data in prepare mode (last block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| RFU (00)                                                                        | 1
| Transaction user validation flag

      0x00 : no user validation requested
                                                                                  | 1
|==============================================================================================================================


'Output data in sign mode'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| ASN-1 encoded message signature with Y parity indicated in the first (sequence) byte                                                                              | variable
|==============================================================================================================================

== Test and utility APDUs

=== GET RANDOM

==== Description

This command returns random bytes from the dongle hardware random number generator

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*
|   E0  |   C0   |  00 | 00 | 00 | variable
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Random bytes                                                                      | variable
|==============================================================================================================================

'Availability'

This function is always available.


== Transport protocol

=== General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms.

The common transport header is defined as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

=== APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 1
| Optional APDU data                                                                | var
|==============================================================================================================================

APDU payload is encoded according to the APDU case

[width="80%"]
|=======================================================================================
| Case Number  | *Lc* | *Le* | Case description
|   1          |  0   |  0   | No data in either direction - L is set to 00
|   2          |  0   |  !0  | Input Data present, no Output Data - L is set to Lc
|   3          |  !0  |  0   | Output Data present, no Input Data - L is set to Le
|   4          |  !0  |  !0  | Both Input and Output Data are present - L is set to Lc
|=======================================================================================

=== APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

=== USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

== Status Words

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|================================================================================================

== Data structures

The format of the data structures is provided for interoperability and validation purposes. A typical user will not need to manipulate them directly.

=== Encoded trusted input

An encoded trusted input is stored internally as follow. The signature is the last block of a Triple DES CBC encryption of the previous data by the trusted input encryption key.

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Magic version (*32*)                                                                | 1
| Flags

    RFU

                                                                                      | 1
| Nonce                                                                               | 2
| Associated transaction hash                                                         | 32
| Index in associated transaction (little endian)                                     | 4
| Associated amount (little endian)                                                   | 8
| Signature                                                                           | 8
|==============================================================================================================================
